apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: terraform-template
  title: "Terraform Template for AWS S3 Bucket"
  description: "Create a simple terraform file for AWS S3 Bucket"
  tags:
    - recommended
    - aws
    - terraform
    - s3
spec:
  owner: service@example.com
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
        - s3Name
        - repoName
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component - which will be used as the solution file name
          ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Compose a description for the S3 bucket
        repoName:
          title: Repository
          type: string
          description: Repository
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        s3Name:
          title: Name
          type: string
          description: Name of S3
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:cookiecutter
      input:
        url: ./template
        # copyWithoutRender:
        #   - .github/workflows/*
        values:
          component_id: '{{ parameters.component_id }}'
          description: '{{ parameters.description }}'
          artifact_id: '{{ parameters.component_id }}'
          s3Name: '{{ parameters.s3Name }}'
          owner: '{{ parameters.owner }}'
          destination: '{{ parameters.repoUrl }}'
          repo: '{{parameters.repoName}}'

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: '{{ parameters.repoUrl }}'  

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: "/catalog-info.yaml"
